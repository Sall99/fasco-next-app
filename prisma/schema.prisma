generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Product {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  slug            String      @unique
  brand           String
  price           Float
  viewersCount    Int         @default(0)
  category        Category    @relation(fields: [categoryId], references: [id])
  categoryId      String      @db.ObjectId
  rating          Rating?
  stock           Stock?
  isAlmostSoldOut Boolean     @default(false)
  tags            String[]
  images          String[]
  description     String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  Order           Order?      @relation(fields: [orderId], references: [id])
  orderId         String?     @db.ObjectId
  OrderItem       OrderItem[]
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String    @unique
  slug     String    @unique
  products Product[]
}

model Rating {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  average      Float    @default(0)
  reviewsCount Int      @default(0)
  reviews      Review[]
  product      Product  @relation(fields: [productId], references: [id])
  productId    String   @unique @db.ObjectId
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Rating   @relation(fields: [ratingId], references: [id])
  ratingId  String   @db.ObjectId
  score     Int      @default(0)
  comment   String?
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Stock {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  quantity          Int     @default(0)
  lowStockThreshold Int     @default(5)
  product           Product @relation(fields: [productId], references: [id])
  productId         String  @unique @db.ObjectId
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  phoneNumber   String?
  emailVerified DateTime?
  image         String?
  password      String?   @db.String
  accounts      Account[]
  sessions      Session[]
  Order         Order[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Order {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  userId          String      @db.ObjectId
  totalAmount     Float
  status          String
  paymentIntentId String
  currency        String
  failureReason   String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  OrderItem       OrderItem[]
  Product         Product[]
  User            User        @relation(fields: [userId], references: [id])
  Shipping        Shipping[]
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String  @db.ObjectId
  price     Float
}

model Shipping {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String   @db.ObjectId
  address    String
  city       String
  postalCode String
  country    String
  phone      String
  email      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Order      Order    @relation(fields: [orderId], references: [id])
}
